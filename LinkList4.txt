import java.util.*;
import java.lang.*;
import java.io.*;

class Node{
    int data;
    Node next;
    
    Node(int newData){
        this.data = newData;
        this.next = null;
    }
}

class Link{
    Node head;
    Link(Node input){
        this.head = input;
    }
    
    Node insertAtEnd(Node head, int input){
        Node newNode = new Node(input);
        if(head == null){
            head = newNode;
            return head;
        }
        Node curr = head;
        while(null != curr.next){
            curr = curr.next;
        }
        curr.next = newNode;
        return head;
    }
    
    Node insertAtGivenNode(Node head, Node searchNode, int input){
        Node newNode = new Node(input);
        if(head == searchNode && head == null){
            head.next = newNode;
        }
        Node curr = head;
        while(null != curr.next){
            if(curr.next == searchNode && null != curr.next){
               Node tmp = searchNode.next;
               searchNode.next = newNode;
               newNode.next = tmp; 
            }
            curr = curr.next;
        }
        return head;
    }
    
    Node insertAtBeginning(Node head, int input){
        Node newNode = new Node(input);
        if(head == null){
            return newNode;
        }
        newNode.next = head;
        head = newNode;
        printList(head); 
        return head; 
    }
    
    int listLength(Node head){
        int count = 0; 
        if(head == null){
            return count;
        }
        Node curr = head;
        while(curr != null){
            count++;
            curr = curr.next;
            if(curr == null){
                count++; 
            }
        }
        System.out.println("There are " + count + " Nodes in the Linked List"); 
        return count; 
    }
    
    Node insertAtGivenPosition(Node head, int position, int value){
        Node newNode = new Node(value);
        int pos = listLength(head);
        if(position < 0 || position > pos){
            System.out.println("Your positiion is out of bounds");
            return null;
        }
        if(position >= 0 || position < pos){
            Node curr = head;
            int count = 1;
            while(null != curr.next){
                count++;
                curr = curr.next;
                if(count == position && (position > 0 && position < pos)){
                    Node tmp = curr.next;
                    curr.next = newNode;
                    newNode.next = tmp;
                }
            }
        }
        return head;
    }
    
    void printList(Node head){
        if(head == null){
            System.out.println("Empty List"); 
        }
        Node curr = head;
        while(curr != null){
            if(curr.next == null){
                System.out.print(curr.data); 
            }else{
                System.out.print(curr.data + " -> ");
            }
            curr = curr.next;
        }
        System.out.println();
    }
    
    
}

class A{
    
    public static void main(String[] args){
        Node one = new Node(1);
        Node two = new Node(2);
        Node three = new Node(3);
        Node four = new Node(4);
        Node five = new Node(9);
        
        one.next = two;
        two.next = three;
        three.next = four;
        four.next = five;
        
        Link a = new Link(one);
        a.printList(one); 
        a.insertAtEnd(one, 5);
        a.printList(one); 
        a.insertAtGivenNode(one, two, 7); 
        a.printList(one); 
        a.insertAtBeginning(one, 8);
        a.listLength(one); 
        a.insertAtGivenPosition(one, 2, 25);
        a.printList(one); 
    }
}