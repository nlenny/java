import java.util.*;
import java.lang.*;
import java.io.*;

interface ATMState {
    void insertCard();
    void ejectCard();
    void insertPin(int pinEntered);
    void requestCash(int cashToWithdraw);
}

class ATMMachine {
    ATMState hasCard;
    ATMState noCard;
    ATMState hasCorrectPin;
    ATMState atmOutOfMoney;
    
    //Current State of the ATM Machine
    ATMState atmState;
    
    int cashInMachine = 2000;
    boolean correctPinEntered = false;
    
    //Constructor
    public ATMMachine(){
        hasCard = new HasCard(this);
        noCard = new NoCard(this);
        hasCorrectPin = new HasPin(this);
        atmOutOfMoney = new NoCash(this); 
        
        atmState = noCard;
        
        if(cashInMachine <= 0){
            atmState = atmOutOfMoney;
        }
    }
    
    void setATMState(ATMState newATMState){
        atmState = newATMState;
    }
    
    public void setCashInMachine(int newCashInMachine){
        cashInMachine = newCashInMachine;
    }
    
    //**************** Implementing methods ************************************
    public void insertCard(){
        atmState.insertCard();
    }
    
    public void ejectCard(){
        atmState.ejectCard();
    }
    
    public void requestCash(int cashToWithdraw){
        atmState.requestCash(cashToWithdraw); 
    }
    
    public void insertPin(int pinEntered){
        atmState.insertPin(pinEntered);
    }
    
    //**************** getter methods *****************************************
    public ATMState getYesCardState(){
        return hasCard;
    }
    
    public ATMState getNoCardState(){
        return noCard;
    }
    
    public ATMState getHasPin(){
        return hasCorrectPin;
    }
    
    public ATMState getNoCashState(){
        return atmOutOfMoney; 
    }
}

//*****************************************************************************
//********** Class HasCard ****************************************************
class HasCard implements ATMState {
    
    ATMMachine atmMachine;
    
    public HasCard(ATMMachine newAtmMachine){
        atmMachine = newAtmMachine;
    }
    
    @Override
    public void insertCard(){
        System.out.println("You can't enter more than one card");
    }
    
    @Override
    public void ejectCard(){
        System.out.println("Card Ejected"); 
        atmMachine.setATMState(atmMachine.getNoCardState()); 
    }
    
    @Override
    public void insertPin(int pinEntered){
        if(pinEntered == 1234){
            System.out.println("Correct PinJ");
            atmMachine.correctPinEntered = true;
            atmMachine.setATMState(atmMachine.getHasPin());
        }else
        System.out.println("Wrong Pin");
        atmMachine.correctPinEntered = false;
        System.out.println("Card Ejected");
        atmMachine.setATMState(atmMachine.getNoCardState());
    }
    
    @Override 
    public void requestCash(int cashToWithdraw){
        System.out.println("Enter pin first"); 
    }
}

//*********************************** NoCard Class ****************************

class NoCard implements ATMState {
    ATMMachine atmMachine;
    
    public NoCard(ATMMachine newAtmMachine){
        atmMachine = newAtmMachine;
    }
    
    @Override
    public void insertCard(){
        System.out.println("Please Enter a PIN");
        atmMachine.setATMState(atmMachine.getYesCardState());
    }
    
    @Override
    public void ejectCard(){
        System.out.println("Enter a card first");  
    }
    
    @Override
    public void insertPin(int pinEntered){
        System.out.println("Enter a card first"); 
    }
    
    @Override 
    public void requestCash(int cashToWithdraw){
        System.out.println("Enter a card first"); 
    }
}

//************************** HasPin Class ************************************

class HasPin implements ATMState {
    ATMMachine atmMachine;
    
    public HasPin(ATMMachine newAtmMachine){
        atmMachine = newAtmMachine;
    }
    
    @Override
    public void insertCard(){
        System.out.println("You can't enter more than one card");
    }
    
    @Override
    public void ejectCard(){
        System.out.println("Card Ejected"); 
        atmMachine.setATMState(atmMachine.getNoCardState()); 
    }
    
    @Override
    public void insertPin(int pinEntered){
        System.out.println("Already Entered Pin");
    }
    
    @Override 
    public void requestCash(int cashToWithdraw){
        
        if(atmMachine.cashInMachine <= 0){
            atmMachine.setATMState(atmMachine.getNoCashState()); 
        }
        
        if(cashToWithdraw > atmMachine.cashInMachine){
            System.out.println("Not Enough Money in your Account");
            System.out.println("Card Ejected");
            atmMachine.setATMState(atmMachine.getNoCardState()); 
        }else{
            System.out.println(cashToWithdraw + " is provided by the machine");
            //atmMachine.setATMState(atmMachine.cashInMachine - cashToWithdraw);
            System.out.println("Card Ejected");
            atmMachine.setATMState(atmMachine.getNoCardState());
        }
    }
}

//*******************************NoCash Class ********************************

class NoCash implements ATMState {
     ATMMachine atmMachine;
    
    public NoCash(ATMMachine newAtmMachine){
        atmMachine = newAtmMachine;
    }
    
    @Override
    public void insertCard(){
        System.out.println("We're out of cash, sorry");
    }
    
    @Override
    public void ejectCard(){
        System.out.println("No money sorry, bye");   
    }
    
    @Override
    public void insertPin(int pinEntered){
        System.out.println("We're out of cash, sorry"); 
    }
    
    @Override 
    public void requestCash(int cashToWithdraw){
        System.out.println("We're out of cash, sorry"); 
    }
}

class TestATMMachine {
    public static void main(String[] args){
        ATMMachine atmMachine = new ATMMachine();
        atmMachine.insertCard();
        atmMachine.ejectCard();
        atmMachine.insertCard();
        atmMachine.insertPin(1234);
        atmMachine.requestCash(2000);
        atmMachine.insertCard();
        atmMachine.insertPin(1234); 
    }
}