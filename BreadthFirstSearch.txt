import java.util.*;
import java.io.*;
import java.lang.*;

class Node{
    int value;
    Node left;
    Node right;
    boolean visited = false;
    
    Node(int v, Node l, Node r){
        value = v;
        left = l;
        right = r;
    }
    
    public Node[] children(){
        Node[] children = new Node[2];
        children[0] = left;
        children[1] = right;
        return children;
    }
}

class BreadthFirstSearch{
    private Node root;
    
    BreadthFirstSearch(Node first){
        root = first;
        traverseIterative();
    }
    
    void traverseIterative(){
        if(root == null){
            return;
        }
        
        LinkedList<Node> nodeList = new LinkedList<Node>(); 
        
        root.visited = true;
        
        System.out.print(root.value + " ");
        
        nodeList.add(root);
        
        Node curr = root;
        
        while(!nodeList.isEmpty()){
            for(Node n : curr.children()){
                if(n != null && !n.visited){
                    System.out.print(n.value + " ");
                    nodeList.add(n);
                    n.visited = true;
                }
            }
            nodeList.removeFirst();
            curr = nodeList.peekFirst();
        }
    }
    
    public static void main(String[] args){
        
        Node threeFirst = new Node(3, null, null);
        Node two = new Node(2, null, null);
        Node four = new Node(4, null, null);
        Node six = new Node(6, null, null);
        Node eight = new Node(8, null, null);
        Node nine = new Node(9, null, null);
        Node ten = new Node(10, null, null);
        
        threeFirst.left = two;
        threeFirst.right = four;
        two.left = six;
        two.right = eight;
        four.left = nine;
        four.right = ten;
        
        BreadthFirstSearch b1 = new BreadthFirstSearch(threeFirst);
        System.out.println(); 
    }
    
}